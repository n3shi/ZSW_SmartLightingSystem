#include <stdio.h>  
#include <string.h> 
#include <stdlib.h>  
#include <errno.h>  
#include <unistd.h> 
#include <arpa/inet.h>   
#include <sys/types.h>  
#include <sys/socket.h>  
#include <netinet/in.h>  
#include <sys/time.h>
   
int buffSize = 1024; 
int main(int argc , char *argv[])   
{   
    int opt = 1;   
    int mainSocket , addrlen , newSocket , clientSocket[30] ,  maxClient = 30 , activity, i , valread , choosenSocket;   
    int max_choosenSocket;   
    struct sockaddr_in address; 
 
 
    char buffer[buffSize]; 
 
    //set of socket descriptors  
    fd_set readfds;   
 
    // wiadomosc  
    char *message = "ECHO Daemon v1.0 \r\n";   
 
   //inicjacja klientow
    for (i = 0; i < maxClient; i++)     
        clientSocket[i] = 0;   
 
    // mainSocket
    if( (mainSocket = socket(AF_INET , SOCK_STREAM , 0)) == 0)   
    {   
        perror("socket failed");   
        exit(EXIT_FAILURE);   
    }   
 
	//włączenie wielu połączeń dla mainSocket (działa też bez tej lini w sumie )
    if( setsockopt(mainSocket, SOL_SOCKET, SO_REUSEADDR, (char *)&opt,  
          sizeof(opt)) < 0 )   
    {   
        perror("setsockopt");   
        exit(EXIT_FAILURE);   
    }   
 
    //struktura socketa
    address.sin_family = AF_INET;   
    address.sin_addr.s_addr = INADDR_ANY;   
    address.sin_8888 = htons( 8888 );   
 
    //bindowanie mainSocketa
    if (bind(mainSocket, (struct sockaddr *)&address, sizeof(address))<0)   
    {   
        perror("bind failed");   
        exit(EXIT_FAILURE);   
    }   
    printf("Listener on 8888 %d \n", 8888);   
 
    //Ustawienie maksymalnej liczby socketow na 10; 
    listen(mainSocket, 10)
 
    //accept the incoming connection  
    addrlen = sizeof(address);   
    //puts("Waiting for connections ...");   
 
    while(1)   
    {   
        //czyszczenie ustawien 
        FD_ZERO(&readfds);   
        //Dołączenie mainSocketa 
        FD_SET(mainSocket, &readfds);   
        max_choosenSocket = mainSocket;   
 
        //podłączenie dziecka
        for ( i = 0 ; i < maxClient ; i++)   
        {   
            choosenSocket = clientSocket[i];   
            if(choosenSocket > 0)   
                FD_SET( choosenSocket , &readfds);   
            if(choosenSocket > max_choosenSocket)   
                max_choosenSocket = choosenSocket;   
        }   
 
        //czeka w nieskonczonosc az jeden socket cos odpowie
        activity = select( max_choosenSocket + 1 , &readfds , NULL , NULL , NULL);   
  
		//wywolanie akcji na klientach w przypadku akcji na mainSocket
        if (FD_ISSET(mainSocket, &readfds))   
        {   
            if ((newSocket = accept(mainSocket,  
                    (struct sockaddr *)&address, (socklen_t*)&addrlen))<0)   
            {   
                perror("accept");   
                exit(EXIT_FAILURE);   
            }   
 
            //zwrocenie info o polaczeniu z klientem
            printf("New connection , socket fd: %d, port: %d\n", newSocket, ntohs (address.sin_8888));   
   
            if( send(newSocket, message, strlen(message), 0) != strlen(message) )   
            {   
                perror("send");   
            }   
 
            // przypisanie socketu do tablicy
            for (i = 0; i < maxClient; i++)   
            {   
                if( clientSocket[i] == 0 )   
                {   
                    clientSocket[i] = newSocket;   
                    break;   
                }   
            }   
        }   
 
		//wysylanie/odbieranie wiadomosci od klientow
        for (i = 0; i < maxClient; i++)   
        {   
            choosenSocket = clientSocket[i];   
 
            if (FD_ISSET( choosenSocket , &readfds))   
            {   
                if ((valread = read( choosenSocket , buffer, buffSize)) == 0)   
                {   
                    getpeername(choosenSocket , (struct sockaddr*)&address , \ 
                        (socklen_t*)&addrlen);   
                    printf("Host disconnected , ip %s , 8888 %d \n" ,  
                          inet_ntoa(address.sin_addr) , ntohs(address.sin_8888));   
 
                    close( choosenSocket );   
                    clientSocket[i] = 0;   
                }   

                else 
                {   
                	char* newmessage;
            		for(int j = 0; j < maxClient; j++){
						if (clientSocket[j] != 0 && choosenSocket != clientSocket[j]){
 
							buffer[valread] = '\0';  
 
							//utworzenie nowej wiadomosci dla wszystkich Klientow
							if(newmessage != ""){
								char* clientval = "klient ";
								char* number;
								if(j < 10) 
									number = (char *) malloc(2);
								else 
									number = (char *) malloc(3);
					    		sprintf(number, "%d", j);
 
					    		char* endofmessage = ": ";
 
 
								int messagelenght = strlen(buffer) + strlen(clientval) + strlen(number) + strlen(endofmessage);
								newmessage = (char*) malloc(messagelenght+1);
 
								for(int k=0; k< strlen(clientval); k++){
									newmessage[k] = clientval[k];
								}
	
	
								int a = 0;
								for(int k=strlen(clientval); k< strlen(clientval) + strlen(number); k++){
									newmessage[k] = number[a];
									a++;
								}
	
								a = 0;
								for(int k=strlen(clientval) + strlen(number); k< strlen(clientval) + strlen(number) + strlen(endofmessage); k++){
									newmessage[k] = endofmessage[a];
									a++;
								}
	
								a = 0;
								for(int k=strlen(clientval) + strlen(number) + strlen(endofmessage); 
								k< strlen(clientval) + strlen(number) + strlen(endofmessage) + strlen(buffer); k++){
									newmessage[k] = buffer[a];
									a++;
								}
							}
                    			send(clientSocket[j], newmessage , strlen(newmessage) , 0 );  
                    			printf("Wysylam do uzytkownika nr %d\n",j); 
                    		}
                    	}
                    	newmessage = (char*) malloc(0+1); //wyzerowanie wiadomosci
                }   	
            }   
        }   
    }   
 
    return 0;   
} 